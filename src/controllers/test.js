const { Scenes } = require('telegraf')
const { BaseScene } = Scenes

const messages = require('../messages.json')
const { InlineKeyboard } = require('../buttons')

const reg = /^[0-9]+$/

module.exports.Test = () => {
  const test = new BaseScene('test')

  test.enter(async (ctx) => {
    await ctx.replyWithHTML(messages.startTest, InlineKeyboard.startTest())
  })

  test.on('callback_query', async (ctx) => {
    const { callbackQuery, session } = ctx

    if (callbackQuery.data === 'start_test') {
      console.log(`[x] –¢–µ—Å—Ç –Ω–∞—á–∞–ª: ${callbackQuery.message.chat.first_name} (${callbackQuery.message.chat.id} - ${callbackQuery.message.chat.username})`)

      session.questionNumber = 1
      session.answers = []

      await ctx.editMessageReplyMarkup()
      await ctx.replyWithHTML(messages.Question1)
    }

    if (callbackQuery.data === 'back') {
      await ctx.scene.leave()
    }
  })

  test.on('text', async (ctx) => {
    const { message, session } = ctx
    const text = message.text
    const splitText = text.split('')

    const validNumber = splitText.map(item => {
      if (parseInt(item) < 4) {
        return true
      } else {
        return false
      }
    })

    const valid = reg.test(text)

    if (session.questionNumber) {
      if (valid && !validNumber.includes(false) && splitText.length < 4) {
        if (session.questionNumber < 21 ) {
          session.questionNumber += 1
          session.answers.push(splitText)
          await ctx.replyWithHTML(messages[`Question${session.questionNumber}`])
        } else {
          session.answers.push(splitText)
          session.answers.flat()
          const resultNumber = session.answers.reduce((acc, rec) => parseInt(acc) + parseInt(rec))
          if (resultNumber < 10) {
            await ctx.replyWithHTML(`<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\nü•≥ –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ /start`)
          }
          if (resultNumber > 9 && resultNumber < 16) {
            await ctx.replyWithHTML(`<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\nüôÇ –£ –≤–∞—Å –ª–µ–≥–∫–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è (—Å—É–±–¥–µ–ø—Ä–µ—Å—Å–∏—è)`)
          }
          if (resultNumber > 15 && resultNumber < 20) {
            await ctx.replyWithHTML(`<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\nüòê –£ –≤–∞—Å —É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è`)
          }
          if (resultNumber > 19 && resultNumber < 30) {
            await ctx.replyWithHTML(`<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\nüôÅ –£ –≤–∞—Å –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è (—Å—Ä–µ–¥–Ω–µ–π —Ç—è–∂–µ—Å—Ç–∏)`)
          }
          if (resultNumber > 29 && resultNumber < 64) {
            await ctx.replyWithHTML(`<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n\n‚òπÔ∏è –£ –≤–∞—Å —Ç—è–∂—ë–ª–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è`, InlineKeyboard.back())
          }
          delete session.questionNumber
          delete session.answers
        }

      } else {
        await ctx.replyWithHTML('–û—Ç—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –±–∞–ª–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–º—É –æ—Ç–≤–µ—Ç—É')
      }
    } else {

    }
  })

  return test
}